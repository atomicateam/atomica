# -*- coding: utf-8 -*-
"""
Atomica data file.
Sets out a structure to store context-specific databook-imported values relating to a model.
"""
from atomica.system import SystemSettings as SS
from atomica.structure_settings import FrameworkSettings as FS, DataSettings as DS
from atomica.system import apply_to_all_methods, log_usage
from atomica.structure import CoreProjectStructure, KeyData


@apply_to_all_methods(log_usage)
class ProjectData(CoreProjectStructure):
    """ Object that details the transition-network structure of models generated by a project. """    
    def __init__(self, **kwargs):
        """ Initialize the data container. """
        super(ProjectData, self).__init__(structure_key=SS.STRUCTURE_KEY_DATA, **kwargs)

        self.filter = {FS.TERM_DATA + FS.KEY_PARAMETER: []}

    def complete_specs(self, framework, **kwargs):
        """
        A method for completing specifications that is called at the end of a file import.
        This delay is because some specifications rely on other definitions and values existing in the specs dictionary.
        """
        # Construct specifications for constructing a databook beyond the information contained in default databook settings.
        self.filterSpecs()
        self.validateSpecs(framework = framework)

    def filterSpecs(self):
        self.filter[DS.TERM_DATA + DS.KEY_PARAMETER] = []
        for item_key in self.specs[DS.KEY_PARAMETER].keys()+self.specs[DS.KEY_CHARACTERISTIC].keys()+self.specs[DS.KEY_COMPARTMENT].keys():
            if not self.get_spec_value(item_key, DS.TERM_DATA) is None:
                self.filter[DS.TERM_DATA + DS.KEY_PARAMETER].append(item_key)

    def validateSpecs(self, framework):
        """ Check that data specifications make sense. """
        # Make sure that all parameters in the framework are in the data as well, primarily to ensure specification of quantity types.
        for item_key in framework.specs[FS.KEY_PARAMETER]:
            try: self.get_spec(item_key)
            except:
                self.create_item(item_name = item_key, item_type = DS.KEY_PARAMETER)
                default_format = None
                if "format" in framework.get_spec(item_key) and not framework.get_spec_value(item_key, "format") is None:
                    default_format = framework.specs[FS.KEY_PARAMETER][item_key]["format"].lower()
                time_series = KeyData(keys = self.specs[DS.KEY_POPULATION].keys(), default_format = default_format)
                value_attribute = DS.PAGE_SPECS[DS.KEY_PARAMETER]["tables"][0].value_attribute
                self.set_spec_value(term = item_key, attribute = value_attribute, value = time_series)