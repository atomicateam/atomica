jobs:

- job: 'tox'

  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
        TOXENV: 'py36'
      Python37:
        python.version: '3.7'
        TOXENV: 'py37'

  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python $(python.version)'
    inputs:
      versionSpec: '$(python.version)'

  - script: python -m pip install --upgrade pip && python -m pip install tox
    displayName: 'Install Tox'

  - script: tox -e $(TOXENV)
    displayName: 'Run Tox tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Publish test results for Python $(python.version)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

  - script: python -m pip install -r requirements.txt
    condition: eq(variables['TOXENV'], 'py37')
    displayName: 'Install Python dependencies for flake8 and sphinx'
    
  - script: flake8 atomica tests --exit-zero --output-file flake8.txt
    condition: eq(variables['TOXENV'], 'py37')
    displayName: 'Run flake8'

  - script: flake8_junit flake8.txt flake8_junit.xml
    condition: eq(variables['TOXENV'], 'py37')
    displayName: 'Generate flake8 junit output'

  - task: PublishTestResults@2
    condition: eq(variables['TOXENV'], 'py37')
    inputs:
      testResultsFiles: '**/flake8_junit.xml'
      testRunTitle: 'Publish flake8 results'

  - script: sudo apt install pandoc -y
    condition: eq(variables['TOXENV'], 'py37')
    displayName: 'Install pandoc dependency for sphinx'

  - script: sphinx-build "docs" "docs/_build"
    condition: eq(variables['TOXENV'], 'py37')
    displayName: 'Build documentation'

  - publish: docs/_build
    condition: eq(variables['TOXENV'], 'py37')
    artifact: docs
    displayName: 'Publish documentation'

# TODO - Switch deployment over to Azure DevOps

#- job: 'deploy'
#  dependsOn: 'tox'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
#
#  steps:
#  - script: python setup.py build && python setup.py sdist
#    displayName: 'Build distribution'
#
#  - script: twine -upload -u $(pypi.username) -p $(pypi.password) dist/*
#    displayName: 'Upload using Twine'