schedules:
- cron: "0 13 * * *"
  displayName: Nightly build
  branches:
    include:
    - master
    - develop

jobs:
- job: 'tox'
  variables:
    python.version: '3.10'
    TOXENV: 'py310'
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-latest'
      mac:
        imageName: 'macos-latest'
      windows:
        imageName: 'windows-latest'
  pool:
    vmImage: $(imageName)
  steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(python.version)'
      inputs:
        versionSpec: '$(python.version)'

    - script: python -m pip install --upgrade pip && python -m pip install tox
      displayName: 'Install Tox'

    - script: tox -e $(TOXENV)
      displayName: 'Run Tox tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
#        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- job: 'flake8'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: UsePythonVersion@0
      displayName: 'Select python version'
      inputs:
        versionSpec: '3.10'
    - script: python -m pip install flake8 flake8-junit-report
      displayName: 'Install flake8'
    - script: flake8 atomica tests --exit-zero --output-file flake8.txt
      # Note - using --exit-zero will cause flake8 'errors' to show up as 'errors' in Azure Pipelines
      # but the test will have been considered to pass. Therefore, the overall tests suite will still
      # be considered to be passing as long as tox runs, and flake8 errors are just guidance for style
      displayName: 'Run flake8'
    - script: flake8_junit flake8.txt flake8_junit.xml
      displayName: 'Generate flake8 junit output'
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/flake8_junit.xml'
        testRunTitle: 'Publish flake8 results'

- job: 'docs'
  condition: and(ne(variables['Build.Reason'], 'PullRequest'), ne(variables['Build.Reason'], 'Schedule')) # Skip if it's a PR build or a scheduled build
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: UsePythonVersion@0
      displayName: 'Select python version'
      inputs:
        versionSpec: '3.10'
    - script: |
        pip install -e .
        python -m pip install -r requirements.txt
        sudo apt install pandoc -y
      displayName: 'Install dependencies'
    - script: |
        mkdir doc_build
        sphinx-build "docs" "doc_build/$(Build.SourceBranchName)" -j2
      displayName: 'Build documentation'
    - script: |
        git clone --depth 1 https://github.com/atomicateam/docs doc_repo
        rm -rf doc_repo/$(Build.SourceBranchName)
        mv doc_build/$(Build.SourceBranchName) doc_repo/$(Build.SourceBranchName)
        git -C doc_repo config user.email ci@azurepipelines
        git -C doc_repo config user.name "Azure Pipelines"
        git -C doc_repo add .
        git -C doc_repo commit -m "Automatic update"
        git -C doc_repo push https://$(GithubToken)@github.com/atomicateam/docs
      displayName: 'Publish site'
#    - publish: docs/_build
#      artifact: docs
#      displayName: 'Publish documentation as Azure zip file'

- job: 'deploy'
  dependsOn: 'tox'
  condition: and(ne(variables['Build.Reason'], 'Schedule'),and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - task: UsePythonVersion@0
      displayName: 'Select python version'
      inputs:
        versionSpec: '3.10'
    - script: |
        python -m pip install wheel
        python -m pip install twine
        python setup.py build
        python setup.py sdist
        python setup.py bdist_wheel
      displayName: 'Build Atomica'
    - task: TwineAuthenticate@1
      displayName: 'Twine Authenticate'
      inputs:
        pythonUploadServiceConnection: pypi_atomica
    - script: |
        python -m twine upload -r "pypi_atomica" --config-file $(PYPIRC_PATH) dist/*
      displayName: 'Upload to PyPI'